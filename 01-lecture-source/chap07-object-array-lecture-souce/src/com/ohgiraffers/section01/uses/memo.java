package com.ohgiraffers.section01.uses;

public class memo {

    /* <Member.class> 일반적으로 필드변수를 선언할때 private으로 하는 이유
     * 1. 캡슐화 무시 : 필드 변수를 'public'으로 선언하면 외부에서 직접 접근할 수 있기 때문에 해당 필드의 값이
     *                언제든지 변경될 수 있다. 이는 객체의 상태를 쉽게 변경할 수 있지만, 객체의 상태를 유지하고
     *                관리하기가 어려워 진다. 객체의 상태를 외부에서 직접 변경하는 것은 객체 지향 프로그래밍의
     *                캡슐화 원칙에 어긋나며, 객체의 내부 상태를 외부에서 보호하고 응집력을 유지하는 것이 중요하다.
     * 2. 유연성 감소 : 필드 변수를 'public'으로 선언하면 해당 클래스의 구현 세부 사항이 외부에 노출되어 버전
     *                업데이트 및 유지 관리가 어려워질 수 있다. 다른 클래스나 모듈이 해당 필드에 의존하고 있으면
     *                필드의 이름이나 타입을 변경할 때 해당 클래스나 모듈의 수정이 필요하게 된다. 이는 코드의
     *                유연성을 감소시키고 유지보수를 어렵게 만들 수 있다.
     * 따라서 필드 변수는 일반적으로 'private'으로 선언하고, 필요에 따라 접근자 메소드(getter/setter)를 통해
     * 필드에 접근하는 것이 더 좋은 방법이다.
     * 이렇게 하면 필드의 접근을 제어할 수 있고, 객체의 상태를 외부에서 변경하는 것을 제한할 수 있으며,
     * 객체의 내부 구현 세부 사항을 숨길 수 있어 유지보수성을 높일 수 있다.
     */

    /* static과 final
     * static은 특정 클래스의 인스턴스에 속하는 것이 아니라 클래스 자체에 속하는것
     * final은 한번 초기화 후에 값을 변경할수 없음. 즉, 값의 변경을 방지
     */

    /*
     * static 블록을 사용하고 안하고의 차이 : 초기화의 시점
     * static 블록이 클래스가 로딩되었을때 제일먼저 실행된다.
     * 코드의 실행과 코드의 처리는 다르다.
     *
     */

}
